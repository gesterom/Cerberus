


__c_function_ pow2(double a){return a*a;}

#once
__c_procedure_                     main(char** args, int arg) {
	a();
}
##twice file
#db 192.168.1.1
__c_procedure_ a(){
	printf("Hell of world");
}

__lexer_keywords{
	while,for,if,
	and,or,xor,not,
	switch,case,break,return,
	False,True,
	Let
}

#exec True
BrainFuck{
++++++++++
[
>+++++++>++++++++++>+++>+<<<<-
] Na początek ustawiamy kilka przydatnych później wartości
>++.               drukuje 'H'
>+.                drukuje 'e'
+++++++.           drukuje 'l'
.                  drukuje 'l'
+++.               drukuje 'o'
>++.               spacja
<<+++++++++++++++. drukuje 'W'
>.                 drukuje 'o'
+++.               drukuje 'r'
------.            drukuje 'l'
--------.          drukuje 'd'
>+.                drukuje '!'
>.                 nowa linia
}

__lexer_operators {
	+,-,*,/,=,
	==,=<,>=,!=
	(,),[,],{,},
	|
}
type Int{}

type SomeType {
	Int a;
	Int b;
}
				Atom True{}
Atom False{}
procedure intToStr(Int a) String {
	String str;
	while a != 0 {
		if a % 10 == 0{
			str = '0' | str;
		}else if a % 10 == 1 {
			str = '1' | str;
		}else if a % 10 == 2 {
			str = '2' | str;
		}else if a % 10 == 3 {
			str = '3' | str;
		}else if a % 10 == 4 {
			str = '4' | str;
		}else if a % 10 == 5 {
			str = '5' | str;
		}else if a % 10 == 6 {
			str = '6' | str;
		}else if a % 10 == 7 {
			str = '7' | str;
		}else if a % 10 == 8 {
			str = '8' | str;
		}else{
			str = '9' | str
		}
		a /= 10;
	}
	return str;
}

type String {}
