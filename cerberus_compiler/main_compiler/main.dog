

##Print False

#exec True
brainfuck
	++++++++++
	[
	>+++++++>++++++++++>+++>+<<<<-
	] Na początek ustawiamy kilka przydatnych później wartości
	>++.               drukuje 'H'
	>+.                drukuje 'e'
	+++++++.           drukuje 'l'
	.                  drukuje 'l'
	+++.               drukuje 'o'
	>++.               spacja
	<<+++++++++++++++. drukuje 'W'
	>.                 drukuje 'o'
	+++.               drukuje 'r'
	------.            drukuje 'l'
	--------.          drukuje 'd'
	>+.                drukuje '!'
	>.                 nowa linia

type Int
type String

atom True
atom False

procedure aala() -> Int
	while a==0 {}
	a = 10 % 4;

#Print False
#LexerDebug False
procedure intToStr(Int a) -> String 
	String str;
	while a != 0 {
		if a % 10 == 0 {
			str = '0' | str;
		}else if a % 10 == 1 {
			str = '1' | str;
		}else if a % 10 == 2 {
			str = '2' | str;
		}else if a % 10 == 3 {
			str = '3' | str;
		}else if a % 10 == 4 {
			str = '4' | str;
		}else if a % 10 == 5 {
			str = '5' | str;
		}else if a % 10 == 6 {
			str = '6' | str;
		}else if a % 10 == 7 {
			str = '7' | str;
		}else if a % 10 == 8 {
			str = '8' | str;
		}else{
			str = '9' | str;
		}
		a /= 10;
	}
	return str;

atom None

#ParserDebug True
#LexerDebug False
procedure main()->Int
	Int maxElf = 0;
	Int indexOfMaxElf = 1;
	Int indexOfElf = 1;
	Int curentElf = 0;
	while not std.in.close() {
		
		Let a : Optional<Int> = std.in.ParseInt();
		if a.hasValue() {
			curentElf += a.val;
			if curentElf > maxElf {
				maxElf = curentElf;
				indexOfMaxElf = indexOfElf;
			}
		}else {
			curentElf = 0;
			indexOfElf++;
		}
	}
	std.out.printFmt("Elf with max calories have {} and was {}",maxElf,indexOfMaxElf);
	return 0;

